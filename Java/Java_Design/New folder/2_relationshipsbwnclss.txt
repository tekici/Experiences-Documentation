WEBVTT

1
00:00:03.425 --> 00:00:07.123
Hi in this lesson we're going to
talk about a few concepts related

2
00:00:07.123 --> 00:00:11.696
to how classes are used together in object
oriented programming in general, and

3
00:00:11.696 --> 00:00:13.580
specifically when using Java and

4
00:00:13.580 --> 00:00:17.320
the earthquake programs and
classes you'll see.

5
00:00:17.320 --> 00:00:21.330
The QuakeEntry Class
created in QuakeEntry.Java.

6
00:00:21.330 --> 00:00:25.660
Encapsulates the basic
characteristics of one earthquake.

7
00:00:25.660 --> 00:00:29.280
Where the quake occurred,
the quake's magnitude and depth, and

8
00:00:29.280 --> 00:00:30.970
a title for the quake.

9
00:00:30.970 --> 00:00:36.940
This makes QuakeEntry what's called
a POJO, or Plain Old Java Object.

10
00:00:36.940 --> 00:00:40.632
This means a QuakeEntry object is not
much more than the characteristics of

11
00:00:40.632 --> 00:00:42.330
the earthquake.

12
00:00:42.330 --> 00:00:47.320
Creating a QuakeEntry object requires
providing all of these characteristics.

13
00:00:47.320 --> 00:00:50.420
For example, it doesn't make
sense to talk about an earthquake

14
00:00:50.420 --> 00:00:54.040
without knowing where it occurred or
how strong it is.

15
00:00:54.040 --> 00:00:57.570
It's not possible to creat
a QuakeEntry object without supplying

16
00:00:57.570 --> 00:00:59.670
all the parameters of the constructor.

17
00:00:59.670 --> 00:01:05.820
Which makes this different than what some
consider a Plain Old Java Object or POJO.

18
00:01:05.820 --> 00:01:09.330
As we'll see QuakeEntry objects
are created when data for

19
00:01:09.330 --> 00:01:12.050
earthquakes is red and parched.

20
00:01:12.050 --> 00:01:17.220
Creating a QuakeEntry object requires
supplying all the information for a quake.

21
00:01:17.220 --> 00:01:23.030
The latitude, the longitude,
the magnitude, the tile and the depth.

22
00:01:23.030 --> 00:01:25.410
A QuakeEntry object
represents the data for

23
00:01:25.410 --> 00:01:28.168
an earthquake that has occurred
somewhere in the world.

24
00:01:28.168 --> 00:01:32.460
So it's immutable and
doesn't change once constructed.

25
00:01:32.460 --> 00:01:35.750
Accessing the state of
an QuakeEntry object is done using

26
00:01:35.750 --> 00:01:38.180
getter methods as you see here.

27
00:01:38.180 --> 00:01:41.120
Get location returns
the location of a quake.

28
00:01:41.120 --> 00:01:45.452
Get depth returns the depth
of the quake and so on.

29
00:01:45.452 --> 00:01:49.520
A QuakeEntry object also has
a reasonable .toString method

30
00:01:49.520 --> 00:01:51.710
to help with printing
information about an earthquake.

31
00:01:53.230 --> 00:01:56.410
An earthquake occurs at
a specific location, and

32
00:01:56.410 --> 00:01:58.900
so we'll use a location class for that.

33
00:01:58.900 --> 00:02:03.870
Location classes have many uses outside of
the QuakeEntry class we're studying here.

34
00:02:03.870 --> 00:02:05.780
Smartphones use locations.

35
00:02:05.780 --> 00:02:10.100
Web browsers use locations and
many other applications do as well.

36
00:02:10.100 --> 00:02:13.970
We have a choice between creating
a location class that's simple

37
00:02:13.970 --> 00:02:18.040
that we could use and study for
this course or we could use

38
00:02:18.040 --> 00:02:22.780
an industrial strength class that would
be tested and useful in other contexts.

39
00:02:22.780 --> 00:02:26.310
We've adopted the location class
from the Android platform.

40
00:02:26.310 --> 00:02:29.000
This gives us the best of several options.

41
00:02:29.000 --> 00:02:32.140
We can be confident that
the class is well tested and

42
00:02:32.140 --> 00:02:36.770
the licensing of the source code allows us
to use and adapt the code as we need to.

43
00:02:36.770 --> 00:02:38.040
We'll see more about this later.

44
00:02:39.060 --> 00:02:42.770
Location objects are created
from a latitude and a longitude.

45
00:02:42.770 --> 00:02:45.840
These specify one location on Earth.

46
00:02:45.840 --> 00:02:48.600
Typically these values
might come from your phone

47
00:02:48.600 --> 00:02:51.130
which get data from GPS satellites or

48
00:02:51.130 --> 00:02:55.350
your web browser which can determine
location based on your IP address.

49
00:02:55.350 --> 00:02:58.920
The Android location class
has a dot distance to method

50
00:02:58.920 --> 00:03:03.050
to determine the distance between
any two locations A and B.

51
00:03:03.050 --> 00:03:05.610
This will allow you to find
earthquakes close to where you live.

52
00:03:06.610 --> 00:03:12.220
This makes the location class more
than a Plain Old Java Object or POJO.

53
00:03:12.220 --> 00:03:15.360
It has state, the latitude,
and the longitude, but

54
00:03:15.360 --> 00:03:20.230
it also has behavior, a method to
determine the distance between locations.

55
00:03:21.390 --> 00:03:26.910
Classes in Java can have both Has-A,
and Uses-A relationships.

56
00:03:26.910 --> 00:03:32.000
The earthquake partial class creates
QuakeEntry objects when data is read

57
00:03:32.000 --> 00:03:33.190
and parsed.

58
00:03:33.190 --> 00:03:38.151
This BlueJ class diagram shows how
the parser uses QuakeEntry objects by

59
00:03:38.151 --> 00:03:39.295
creating them.

60
00:03:39.295 --> 00:03:45.350
A QuakeEntry object also creates
a location object as seen in the diagram.

61
00:03:45.350 --> 00:03:50.040
The QuakeEntry class creates a location
object by passing the latitude and

62
00:03:50.040 --> 00:03:52.940
longitude to the location object.

63
00:03:52.940 --> 00:03:55.970
This creates a new location
object using this data.

64
00:03:57.070 --> 00:04:02.190
The location object created is
stored in instance field myLocation.

65
00:04:02.190 --> 00:04:08.140
When one class Has-A or contains another
class, we call this a Has-A relationship.

66
00:04:08.140 --> 00:04:12.650
The location class implements comparable,
we'll discuss this at another lesson.

67
00:04:12.650 --> 00:04:14.790
As you can see the BlueJ diagram,

68
00:04:14.790 --> 00:04:19.180
the earthquake client class
also uses a location object.

69
00:04:19.180 --> 00:04:24.070
Locations are used to determine which
earthquakes are closest to where you live,

70
00:04:24.070 --> 00:04:25.510
or to where I live.

71
00:04:25.510 --> 00:04:27.760
We'll see this in the coding demo.

72
00:04:27.760 --> 00:04:30.930
The location .distanceTo method
helps in writing this code.

73
00:04:32.050 --> 00:04:36.640
A QuakeEntry object is also used
by the EarthQuakeClient class.

74
00:04:36.640 --> 00:04:41.620
For example, this allows client programs
to find all quakes of high magnitude

75
00:04:41.620 --> 00:04:45.570
using the getMagnitude method
of the QuakeEntry class.

76
00:04:45.570 --> 00:04:46.370
Happy programming.