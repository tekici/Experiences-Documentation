WEBVTT

1
00:00:03.087 --> 00:00:07.196
Hello, in this lesson we'll discuss
how we are able to use the well tested

2
00:00:07.196 --> 00:00:09.530
Android Location class in our programs.

3
00:00:10.550 --> 00:00:12.990
The Location.distanceTo method

4
00:00:12.990 --> 00:00:16.300
has a comment that indicates
what the method does.

5
00:00:16.300 --> 00:00:19.709
Reading documentation is an important
part of creating programs.

6
00:00:20.910 --> 00:00:25.360
This method returns the distance
in meters, between two locations.

7
00:00:25.360 --> 00:00:28.680
We'll remember that the distance is
in meters, when writing code later.

8
00:00:29.750 --> 00:00:35.710
You can also see that the method
uses the WGS84 ellipsoid standard,

9
00:00:35.710 --> 00:00:38.830
adhering to standards is a good idea.

10
00:00:38.830 --> 00:00:41.070
It helps to ensure our code is robust.

11
00:00:41.070 --> 00:00:44.770
Accepted in a large community, and
is verifiable as being correct.

12
00:00:44.770 --> 00:00:51.240
The World Geodetic System,
established from 1984, is used here.

13
00:00:51.240 --> 00:00:53.880
We should be glad that we
can rely on this standard.

14
00:00:53.880 --> 00:00:57.100
Rather than trying to determine
the distance between two points

15
00:00:57.100 --> 00:01:00.539
on a three-dimensional sphere-like
ellipsoid, that is the planet Earth.

16
00:01:01.650 --> 00:01:04.410
Let's work to understand
the location class, API.

17
00:01:04.410 --> 00:01:10.060
The location class we are using
come from the Android system.

18
00:01:10.060 --> 00:01:14.670
Android powers more smart phones and
devices than any other operating system.

19
00:01:15.780 --> 00:01:17.580
You can read the documentation and

20
00:01:17.580 --> 00:01:21.830
understand the location, API,
on the web like many modern APIs.

21
00:01:23.150 --> 00:01:27.990
This API is really useful in developing
the many location aware applications

22
00:01:27.990 --> 00:01:29.280
that run under Android.

23
00:01:30.810 --> 00:01:34.880
To use the location class,
you'll need to do several things.

24
00:01:34.880 --> 00:01:38.340
You'll wanna read the documentation
to see how to use the class and

25
00:01:38.340 --> 00:01:40.949
what the API says about using the class.

26
00:01:41.950 --> 00:01:46.970
You'll need to create location objects
using the ideas you read about in the API.

27
00:01:48.270 --> 00:01:53.230
You'll also call methods like distanceTo
by adhering to what the API documentation

28
00:01:53.230 --> 00:01:58.240
says and by testing your code
using the concepts from the API.

29
00:01:58.240 --> 00:02:02.000
The Android Location class is licensed for
reuse.

30
00:02:02.000 --> 00:02:07.790
The location class uses an Apache
2.0 open source software license.

31
00:02:07.790 --> 00:02:11.800
You can read the details of what
this license allows online.

32
00:02:11.800 --> 00:02:15.790
The documentation that comes with
location.java from the Android system

33
00:02:15.790 --> 00:02:17.578
indicates which license is used.

34
00:02:17.578 --> 00:02:22.020
The Apache 2.0 license
specifically allows for

35
00:02:22.020 --> 00:02:26.630
reuse of the code in the location class,
and for the code to be changed.

36
00:02:26.630 --> 00:02:31.290
This is great, since we've taken the code
and made some modifications to it.

37
00:02:31.290 --> 00:02:35.230
Our adaptations removed the location
classes dependencies so

38
00:02:35.230 --> 00:02:38.250
it is useable outside
of the Android system.

39
00:02:38.250 --> 00:02:41.800
We still benefit from the robust
testing and development of the class.

40
00:02:41.800 --> 00:02:44.140
So we're confident it will work.

41
00:02:44.140 --> 00:02:48.330
We have also adopted the same
Apache license as you can see here.

42
00:02:49.590 --> 00:02:54.620
Because we chosen the Apache 2.0 license,
you can adopt the code and

43
00:02:54.620 --> 00:02:56.270
make changes too.

44
00:02:56.270 --> 00:02:58.410
It works as given in our examples.

45
00:02:58.410 --> 00:03:00.890
So, you can simply use it without
making changes if you want.

46
00:03:02.040 --> 00:03:06.754
This kind of shared community programming
is a powerful tool in creating software.